{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1365618e.chunk.js","sourcesContent":["const clientId = '4067c62d8e33444c844603b0a80e8803';\nconst redirectUri = 'http://sam-is-jamming.surge.sh';\n\nlet accessToken;\nconst Spotify = {\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n\n        //check token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\n\n        if(accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            //clear params and get a new token\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            \n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        })\n    },\n\n    savePlaylist(name, trackUris) {\n        if(!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                })\n            })\n        })\n    }\n};\n\n\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends React.Component {\nconstructor(props) {\n    super(props);\n\n    this.state = {\n        term: ''\n    }\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n}\n\nsearch() {\n    this.props.onSearch(this.state.term);\n}\n\nhandleTermChange(event) {\n    this.setState({term: event.target.value});\n}\n \n    render() {\n        return(\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\" \n                       onChange={this.handleTermChange}/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\n\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if(this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return(\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\nexport default Track;","import React from 'react';\nimport './Tracklist.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\nrender() {\n    return(\n        <div className=\"TrackList\">\n            {this.props.tracks.map(track => {\n                return <Track track={track} \n                key={track.id}\n                onAdd={this.props.onAdd} \n                onRemove={this.props.onRemove}\n                isRemoval={this.props.isRemoval}/>\n                })\n            }\n        </div>\n    )\n}\n}\n\nexport default TrackList;","import React from 'react';\nimport TrackList from '../Tracklist/TrackList';\nimport './SearchResults.css';\n\n\nclass SearchResults extends React.Component {\n\nrender() {\n    return(\n        <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList tracks={this.props.searchResults} \n                        onAdd={this.props.onAdd}\n                        isRemoval={false} />\n        </div>\n    )\n    }\n}\n\nexport default SearchResults;\n\n","import React from 'react';\nimport TrackList from '../Tracklist/TrackList';\n\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\nconstructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n}\n\nhandleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n}\n\n    render() {\n        return(\n            <div className=\"Playlist\">\n                <input defaultValue={'New Playlist'} \n                       onChange={this.handleNameChange}/>\n                <TrackList tracks={this.props.playlistTracks} \n                            onRemove={this.props.onRemove} \n                            isRemoval={true}/> \n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n          </div>\n        )\n    }\n}\n\nexport default Playlist;\n\n","import React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport './App.css';\n\n\nclass App extends React.Component {\nconstructor(props) {\n  super(props);\n\n  this.state = {\n    searchResults: [],\n    playlistName: 'Playlist',\n    playlistTracks: []\n  }\n  this.addTrack = this.addTrack.bind(this);\n  this.removeTrack = this.removeTrack.bind(this);\n  this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  this.savePlaylist = this.savePlaylist.bind(this);\n  this.search = this.search.bind(this);\n}\n\naddTrack(track) {\n  let tracks = this.state.playlistTracks;\n  if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n    return;\n  }\n\n  tracks.push(track);\n  this.setState({ playlistTracks: tracks });\n}\n\nremoveTrack(track) {\n  let tracks = this.state.playlistTracks;\n  tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n  this.setState({ playlistTracks: tracks });\n}\n\nupdatePlaylistName(name) {\n  this.setState({ playlistName: name });\n\n}\n\nsavePlaylist() {\n  const trackUris = this.state.playlistTracks.map(track => track.uri);\n  Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    })\n  })\n}\n\nsearch(term) {\n  Spotify.search(term).then(searchResults => {\n    this.setState({searchResults: searchResults});\n  });\n\n}\n\n  render() {\n  return (\n    <div>\n      <h1>Sam's <span className=\"highlight\">Awesome</span> Jams</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={this.state.searchResults}\n                          onAdd={this.addTrack} />\n          <Playlist playlistName={this.state.playlistName} \n                    playlistTracks={this.state.playlistTracks}\n                    onRemove={this.removeTrack} \n                    onNameChange={this.updatePlaylistName}\n                    onSave={this.savePlaylist}/>\n         \n        </div>\n    </div>\n  </div>\n\n  );\n}\n}\n\n// spotify:track:0lSZh5W0wDeurkGzLYY6hf\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}